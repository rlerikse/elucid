'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMount;

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _enzyme = require('enzyme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// Generate an enhanced mount function.
function createMount() {
  var options1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _options1$mount = options1.mount,
      mount = _options1$mount === undefined ? _enzyme.mount : _options1$mount,
      other1 = _objectWithoutProperties(options1, ['mount']);

  var attachTo = window.document.createElement('div');
  attachTo.className = 'app';
  attachTo.setAttribute('id', 'app');
  window.document.body.insertBefore(attachTo, window.document.body.firstChild);

  var mountWithContext = function mountWithContext(node) {
    var options2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return mount(node, Object.assign({
      attachTo: attachTo
    }, other1, options2));
  };

  mountWithContext.attachTo = attachTo;
  mountWithContext.cleanUp = function () {
    _reactDom2.default.unmountComponentAtNode(attachTo);
    attachTo.parentNode.removeChild(attachTo);
  };

  return mountWithContext;
}

//# sourceMappingURL=createMount.js.map