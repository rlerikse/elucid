'use strict';

var _chai = require('chai');

var _consoleErrorMock = require('test/utils/consoleErrorMock');

var _consoleErrorMock2 = _interopRequireDefault(_consoleErrorMock);

var _createGenerateClassName = require('./createGenerateClassName');

var _createGenerateClassName2 = _interopRequireDefault(_createGenerateClassName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('createGenerateClassName', function () {
  describe('counter', function () {
    it('should increment a scoped counter', function () {
      var rule = { key: 'root' };
      var generateClassName1 = (0, _createGenerateClassName2.default)();
      _chai.assert.strictEqual(generateClassName1(rule), 'root-1');
      _chai.assert.strictEqual(generateClassName1(rule), 'root-2');
      var generateClassName2 = (0, _createGenerateClassName2.default)();
      _chai.assert.strictEqual(generateClassName2(rule), 'root-1');
    });
  });

  it('should escape parenthesis', function () {
    var generateClassName = (0, _createGenerateClassName2.default)();
    _chai.assert.strictEqual(generateClassName({ key: 'root' }, {
      options: {
        classNamePrefix: 'pure(MuiButton)',
        jss: {}
      }
    }), 'pure-MuiButton--root-1');
  });

  it('should escape spaces', function () {
    var generateClassName = (0, _createGenerateClassName2.default)();
    _chai.assert.strictEqual(generateClassName({ key: 'root' }, {
      options: {
        classNamePrefix: 'foo bar',
        jss: {}
      }
    }), 'foo-bar-root-1');
  });

  describe('options: dangerouslyUseGlobalCSS', function () {
    it('should use a global class name', function () {
      var generateClassName = (0, _createGenerateClassName2.default)({
        dangerouslyUseGlobalCSS: true
      });
      _chai.assert.strictEqual(generateClassName({
        key: 'root'
      }, {
        options: {
          name: 'Button',
          classNamePrefix: 'Button2',
          jss: {}
        }
      }), 'Button-root');
      _chai.assert.strictEqual(generateClassName({
        key: 'root'
      }, {
        options: {
          classNamePrefix: 'Button',
          jss: {}
        }
      }), 'Button-root-2');
    });

    it('should default to a non deterministic name', function () {
      var generateClassName = (0, _createGenerateClassName2.default)({
        dangerouslyUseGlobalCSS: true
      });
      _chai.assert.strictEqual(generateClassName({
        key: 'root'
      }), 'root-1');
    });
  });

  describe('formatting', function () {
    it('should take the sheet meta in development if available', function () {
      var rule = { key: 'root' };
      var styleSheet = { options: { classNamePrefix: 'Button' } };
      var generateClassName = (0, _createGenerateClassName2.default)();
      _chai.assert.strictEqual(generateClassName(rule, styleSheet), 'Button-root-1');
    });

    it('should use a base 10 representation', function () {
      var rule = { key: 'root' };
      var generateClassName = (0, _createGenerateClassName2.default)();
      _chai.assert.strictEqual(generateClassName(rule), 'root-1');
      _chai.assert.strictEqual(generateClassName(rule), 'root-2');
      _chai.assert.strictEqual(generateClassName(rule), 'root-3');
      _chai.assert.strictEqual(generateClassName(rule), 'root-4');
      _chai.assert.strictEqual(generateClassName(rule), 'root-5');
      _chai.assert.strictEqual(generateClassName(rule), 'root-6');
      _chai.assert.strictEqual(generateClassName(rule), 'root-7');
      _chai.assert.strictEqual(generateClassName(rule), 'root-8');
      _chai.assert.strictEqual(generateClassName(rule), 'root-9');
      _chai.assert.strictEqual(generateClassName(rule), 'root-10');
    });

    describe('production', function () {
      // Only run the test on node.
      if (!/jsdom/.test(window.navigator.userAgent)) {
        return;
      }

      var nodeEnv = void 0;
      var env = process.env;

      before(function () {
        nodeEnv = env.NODE_ENV;
        env.NODE_ENV = 'production';
        _consoleErrorMock2.default.spy();
      });

      after(function () {
        env.NODE_ENV = nodeEnv;
        _consoleErrorMock2.default.reset();
      });

      it('should output a short representation', function () {
        var rule = { key: 'root' };
        var generateClassName = (0, _createGenerateClassName2.default)();
        _chai.assert.strictEqual(generateClassName(rule), 'jss1');
      });

      it('should work with global CSS', function () {
        var rule = { key: 'root' };
        var generateClassName = (0, _createGenerateClassName2.default)({
          dangerouslyUseGlobalCSS: true
        });
        _chai.assert.strictEqual(generateClassName(rule), 'jss1');
      });
    });
  });
});

//# sourceMappingURL=createGenerateClassName.test.js.map