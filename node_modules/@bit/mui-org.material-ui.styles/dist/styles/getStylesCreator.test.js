'use strict';

var _chai = require('chai');

var _consoleErrorMock = require('test/utils/consoleErrorMock');

var _consoleErrorMock2 = _interopRequireDefault(_consoleErrorMock);

var _getStylesCreator = require('./getStylesCreator');

var _getStylesCreator2 = _interopRequireDefault(_getStylesCreator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('getStylesCreator', function () {
  var name = 'name';
  var stylesCreator = (0, _getStylesCreator2.default)({
    root: {
      color: 'black',
      '&:hover': {
        color: 'red',
        borderRadius: 0
      }
    }
  });

  it('should be able to get the styles', function () {
    var styles = stylesCreator.create({});
    _chai.assert.deepEqual(styles, {
      root: {
        color: 'black',
        '&:hover': {
          color: 'red',
          borderRadius: 0
        }
      }
    });
  });

  describe('overrides', function () {
    before(function () {
      _consoleErrorMock2.default.spy();
    });

    after(function () {
      _consoleErrorMock2.default.reset();
    });

    it('should be able to overrides some rules, deep', function () {
      var theme = {
        overrides: _defineProperty({}, name, {
          root: { color: 'white', '&:hover': { borderRadius: 2, backgroundColor: 'black' } }
        })
      };
      var styles = stylesCreator.create(theme, name);
      _chai.assert.deepEqual(styles, {
        root: {
          color: 'white',
          '&:hover': {
            color: 'red',
            borderRadius: 2,
            backgroundColor: 'black'
          }
        }
      });
    });

    it('should warn on wrong usage', function () {
      var theme = {
        overrides: _defineProperty({}, name, {
          bubu: {
            color: 'white'
          }
        })
      };
      stylesCreator.create(theme, name);
      _chai.assert.strictEqual(_consoleErrorMock2.default.callCount(), 1);
      _chai.assert.match(_consoleErrorMock2.default.args()[0][0], /Fix the `bubu` key of `theme\.overrides\.name`/);
    });

    it('should support jss-expand', function () {
      var stylesCreator2 = (0, _getStylesCreator2.default)({
        root: {
          padding: [8, 16]
        }
      });

      var theme = {
        overrides: _defineProperty({}, name, {
          root: {
            padding: [20, 10]
          }
        })
      };
      var styles = stylesCreator2.create(theme, name);
      _chai.assert.deepEqual(styles, {
        root: {
          padding: [20, 10]
        }
      });
    });
  });
});

//# sourceMappingURL=getStylesCreator.test.js.map