'use strict';

var _chai = require('chai');

var _createPalette = require('./createPalette');

var _createPalette2 = _interopRequireDefault(_createPalette);

var _createTypography = require('./createTypography');

var _createTypography2 = _interopRequireDefault(_createTypography);

var _consoleErrorMock = require('test/utils/consoleErrorMock');

var _consoleErrorMock2 = _interopRequireDefault(_consoleErrorMock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('createTypography', function () {
  var palette = void 0;

  before(function () {
    palette = (0, _createPalette2.default)({});
  });

  it('should create a material design typography according to spec', function () {
    var typography = (0, _createTypography2.default)(palette, {});
    _chai.assert.strictEqual(typography.fontSize, 14);
  });

  it('should create a typography with custom fontSize', function () {
    var typography = (0, _createTypography2.default)(palette, { fontSize: 15 });
    _chai.assert.strictEqual(typography.fontSize, 15);
  });

  it('should accept a function', function () {
    var typography = (0, _createTypography2.default)(palette, function (paletteCurrent) {
      _chai.assert.strictEqual(palette, paletteCurrent);

      return { fontSize: 15 };
    });
    _chai.assert.strictEqual(typography.fontSize, 15);
  });

  it('should accept a custom font size', function () {
    var typography = (0, _createTypography2.default)(palette, { fontSize: 16 });
    _chai.assert.strictEqual(typography.body2.fontSize, '1rem', 'should be 16px');
  });

  it('should create a typography with a custom baseFontSize', function () {
    var typography = (0, _createTypography2.default)(palette, { htmlFontSize: 10 });
    _chai.assert.strictEqual(typography.display4.fontSize, '11.2rem');
  });

  it('should create a typography with custom h1', function () {
    var customFontSize = '18px';
    var typography = (0, _createTypography2.default)(palette, { h1: { fontSize: customFontSize } });
    _chai.assert.strictEqual(typography.h1.fontSize, customFontSize);
  });

  it('should apply a CSS property to all the variants', function () {
    var typography = (0, _createTypography2.default)(palette, { allVariants: { marginLeft: 0 } });
    var allVariants = ['display4', 'display3', 'display2', 'display1', 'headline', 'title', 'subheading', 'body2', 'body1', 'caption', 'button'];

    allVariants.forEach(function (variant) {
      _chai.assert.strictEqual(typography[variant].marginLeft, 0);
    });
  });

  it('only defines letter-spacing if the font-family is not overwritten', function () {
    _chai.assert.isDefined((0, _createTypography2.default)(palette, {}).h1.letterSpacing);
    _chai.assert.isUndefined((0, _createTypography2.default)(palette, { fontFamily: 'Gotham' }).h1.letterSpacing);
  });

  describe('typography v2 migration', function () {
    beforeEach(function () {
      // eslint-disable-next-line no-underscore-dangle
      global.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__ = false;
      _consoleErrorMock2.default.spy();
    });

    afterEach(function () {
      // eslint-disable-next-line no-underscore-dangle
      global.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__ = true;
      _consoleErrorMock2.default.reset();
    });

    var testTypography = function testTypography(options, expectWarning) {
      (0, _createTypography2.default)(palette, options);

      if (expectWarning) {
        _chai.assert.strictEqual(_consoleErrorMock2.default.callCount(), 1);
        _chai.assert.include(_consoleErrorMock2.default.args()[0][0], 'Material-UI:');
      } else {
        _chai.assert.strictEqual(_consoleErrorMock2.default.callCount(), 0);
      }
    };

    it('warns if the old typography is used', function () {
      testTypography({}, true);
    });

    it('warns if deprecated variants are overwritten even if typography v2 is enabled', function () {
      testTypography({ useNextVariants: true }, false);
    });
  });
});

//# sourceMappingURL=createTypography.test.js.map