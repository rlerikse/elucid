'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sinon = require('sinon');

var _chai = require('chai');

var _reactJss = require('react-jss');

var _jss = require('jss');

var _consoleErrorMock = require('test/utils/consoleErrorMock');

var _consoleErrorMock2 = _interopRequireDefault(_consoleErrorMock);

var _jssPreset = require('./jssPreset');

var _jssPreset2 = _interopRequireDefault(_jssPreset);

var _withStyles = require('./withStyles');

var _withStyles2 = _interopRequireDefault(_withStyles);

var _MuiThemeProvider = require('./MuiThemeProvider');

var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);

var _createMuiTheme = require('./createMuiTheme');

var _createMuiTheme2 = _interopRequireDefault(_createMuiTheme);

var _createGenerateClassName = require('./createGenerateClassName');

var _createGenerateClassName2 = _interopRequireDefault(_createGenerateClassName);

var _testUtils = require('@material-ui/core/test-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// eslint-disable-next-line react/prefer-stateless-function
var Empty = function (_React$Component) {
  _inherits(Empty, _React$Component);

  function Empty() {
    _classCallCheck(this, Empty);

    return _possibleConstructorReturn(this, (Empty.__proto__ || Object.getPrototypeOf(Empty)).apply(this, arguments));
  }

  _createClass(Empty, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', null);
    }
  }]);

  return Empty;
}(_react2.default.Component);

describe('withStyles', function () {
  var shallow = void 0;
  var mount = void 0;

  before(function () {
    shallow = (0, _testUtils.createShallow)();
    mount = (0, _testUtils.createMount)();
  });

  after(function () {
    mount.cleanUp();
  });

  describe('props', function () {
    var StyledComponent1 = void 0;
    var classes = void 0;

    before(function () {
      var styles = { root: { display: 'flex' } };
      StyledComponent1 = (0, _withStyles2.default)(styles, { name: 'MuiTextField' })(Empty);
      classes = (0, _testUtils.getClasses)(_react2.default.createElement(StyledComponent1, null));
    });

    it('should provide a classes property', function () {
      var wrapper = shallow(_react2.default.createElement(StyledComponent1, null));
      _chai.assert.deepEqual(wrapper.props().classes, classes, 'Should provide the classes property');
    });

    describe('prop: classes', function () {
      beforeEach(function () {
        _consoleErrorMock2.default.spy();
      });

      afterEach(function () {
        _consoleErrorMock2.default.reset();
      });

      it('should accept a classes property', function () {
        var wrapper = shallow(_react2.default.createElement(StyledComponent1, { classes: { root: 'h1' } }));
        _chai.assert.deepEqual(wrapper.props().classes, { root: classes.root + ' h1' });
        _chai.assert.strictEqual(_consoleErrorMock2.default.callCount(), 0);
      });

      it('should ignore undefined property', function () {
        var wrapper = shallow(_react2.default.createElement(StyledComponent1, { classes: { root: undefined } }));
        _chai.assert.deepEqual(wrapper.props().classes, { root: classes.root });
        _chai.assert.strictEqual(_consoleErrorMock2.default.callCount(), 0);
      });

      it('should warn if providing a unknown key', function () {
        var wrapper = shallow(_react2.default.createElement(StyledComponent1, { classes: { bar: 'foo' } }));

        _chai.assert.deepEqual(wrapper.props().classes, { root: classes.root, bar: 'undefined foo' });
        _chai.assert.strictEqual(_consoleErrorMock2.default.callCount(), 1);
        _chai.assert.match(_consoleErrorMock2.default.args()[0][0], /Material-UI: the key `bar` provided to the classes property is not implemented/);
      });

      it('should warn if providing a string', function () {
        var wrapper = shallow(_react2.default.createElement(StyledComponent1, { classes: 'titi' }));

        _chai.assert.deepEqual(wrapper.props().classes, { root: classes.root });
        _chai.assert.strictEqual(_consoleErrorMock2.default.callCount() >= 1, true);
        var args = _consoleErrorMock2.default.args();
        _chai.assert.match(_consoleErrorMock2.default.args()[args.length - 1][0], /You might want to use the className property instead./);
      });

      it('should warn if providing a non string', function () {
        var wrapper = shallow(_react2.default.createElement(StyledComponent1, { classes: { root: {} } }));

        _chai.assert.deepEqual(wrapper.props().classes, { root: classes.root + ' [object Object]' });
        _chai.assert.strictEqual(_consoleErrorMock2.default.callCount(), 1);
        _chai.assert.match(_consoleErrorMock2.default.args()[0][0], /Material-UI: the key `root` provided to the classes property is not valid/);
      });
    });

    describe('prop: innerRef', function () {
      it('should provide a ref on the inner component', function () {
        var handleRef = (0, _sinon.spy)();
        mount(_react2.default.createElement(StyledComponent1, { innerRef: handleRef }));
        _chai.assert.strictEqual(handleRef.callCount, 1);
      });
    });

    describe('classes memoization', function () {
      it('should recycle with no classes property', function () {
        var wrapper = mount(_react2.default.createElement(StyledComponent1, null));
        var classes1 = wrapper.find(Empty).props().classes;
        wrapper.update();
        var classes2 = wrapper.find(Empty).props().classes;
        _chai.assert.strictEqual(classes1, classes2);
      });

      it('should recycle even when a classes property is provided', function () {
        var inputClasses = { root: 'foo' };
        var wrapper = mount(_react2.default.createElement(StyledComponent1, { classes: inputClasses }));
        var classes1 = wrapper.find(Empty).props().classes;
        wrapper.setProps({
          classes: inputClasses
        });
        var classes2 = wrapper.find(Empty).props().classes;
        _chai.assert.strictEqual(classes1, classes2);
      });

      it('should invalidate the cache', function () {
        var wrapper = mount(_react2.default.createElement(StyledComponent1, { classes: { root: 'foo' } }));
        var classes1 = wrapper.find(Empty).props().classes;
        _chai.assert.deepEqual(classes1, {
          root: classes.root + ' foo'
        });
        wrapper.setProps({
          classes: { root: 'bar' }
        });
        var classes2 = wrapper.find(Empty).props().classes;
        _chai.assert.notStrictEqual(classes1, classes2);
        _chai.assert.deepEqual(classes2, {
          root: classes.root + ' bar'
        });
      });
    });
  });

  describe('mount', function () {
    var sheetsRegistry = void 0;
    var jss = void 0;
    var generateClassName = void 0;

    beforeEach(function () {
      jss = (0, _jss.create)((0, _jssPreset2.default)());
      generateClassName = (0, _createGenerateClassName2.default)();
      sheetsRegistry = new _jss.SheetsRegistry();
    });

    it('should run lifecycles with no theme', function () {
      var styles = { root: { display: 'flex' } };
      var StyledComponent = (0, _withStyles2.default)(styles)(Empty);
      var wrapper = mount(_react2.default.createElement(
        _MuiThemeProvider2.default,
        { theme: (0, _createMuiTheme2.default)() },
        _react2.default.createElement(
          _reactJss.JssProvider,
          { registry: sheetsRegistry, jss: jss, generateClassName: generateClassName },
          _react2.default.createElement(StyledComponent, null)
        )
      ));
      _chai.assert.strictEqual(sheetsRegistry.registry.length, 1);
      _chai.assert.deepEqual(sheetsRegistry.registry[0].classes, { root: 'Empty-root-1' });
      wrapper.update();
      _chai.assert.strictEqual(sheetsRegistry.registry.length, 1, 'should only attach once');
      _chai.assert.deepEqual(sheetsRegistry.registry[0].classes, { root: 'Empty-root-1' });
      wrapper.setProps({ theme: (0, _createMuiTheme2.default)() });
      _chai.assert.strictEqual(sheetsRegistry.registry.length, 1, 'should only attach once');
      _chai.assert.deepEqual(sheetsRegistry.registry[0].classes, { root: 'Empty-root-1' });

      wrapper.unmount();
      _chai.assert.strictEqual(sheetsRegistry.registry.length, 0);
    });

    it('should support theme.props', function () {
      var styles = { root: { display: 'flex' } };
      var StyledComponent = (0, _withStyles2.default)(styles, { name: 'MuiFoo' })(Empty);

      var wrapper = mount(_react2.default.createElement(
        _MuiThemeProvider2.default,
        {
          theme: (0, _createMuiTheme2.default)({
            props: {
              MuiFoo: {
                foo: 'bar'
              }
            }
          })
        },
        _react2.default.createElement(StyledComponent, { foo: undefined })
      ));

      _chai.assert.strictEqual(wrapper.find(Empty).props().foo, 'bar');
      wrapper.unmount();
    });

    it('should work when depending on a theme', function () {
      var styles = function styles(theme) {
        return { root: { padding: theme.spacing.unit } };
      };
      var StyledComponent = (0, _withStyles2.default)(styles, { name: 'MuiTextField' })(Empty);

      var wrapper = mount(_react2.default.createElement(
        _MuiThemeProvider2.default,
        { theme: (0, _createMuiTheme2.default)() },
        _react2.default.createElement(
          _reactJss.JssProvider,
          { registry: sheetsRegistry, jss: jss, generateClassName: generateClassName },
          _react2.default.createElement(StyledComponent, null)
        )
      ));
      _chai.assert.strictEqual(sheetsRegistry.registry.length, 1, 'should only attach once');
      _chai.assert.deepEqual(sheetsRegistry.registry[0].classes, { root: 'MuiTextField-root-1' });
      wrapper.setProps({ theme: (0, _createMuiTheme2.default)() });
      _chai.assert.strictEqual(sheetsRegistry.registry.length, 1, 'should only attach once');
      _chai.assert.deepEqual(sheetsRegistry.registry[0].classes, { root: 'MuiTextField-root-2' });
    });

    it('should support the overrides key', function () {
      var styles = { root: { padding: 8 } };
      var StyledComponent = (0, _withStyles2.default)(styles, { name: 'MuiTextField' })(Empty);

      mount(_react2.default.createElement(
        _MuiThemeProvider2.default,
        {
          theme: (0, _createMuiTheme2.default)({
            overrides: {
              MuiTextField: {
                root: {
                  padding: 9
                }
              }
            }
          })
        },
        _react2.default.createElement(
          _reactJss.JssProvider,
          { registry: sheetsRegistry, jss: jss, generateClassName: generateClassName },
          _react2.default.createElement(StyledComponent, null)
        )
      ));

      _chai.assert.strictEqual(sheetsRegistry.registry.length, 1, 'should only attach once');
      _chai.assert.deepEqual(sheetsRegistry.registry[0].rules.raw, { root: { padding: 9 } });
    });

    describe('options: disableStylesGeneration', function () {
      it('should not generate the styles', function () {
        var styles = { root: { display: 'flex' } };
        var StyledComponent = (0, _withStyles2.default)(styles)(Empty);

        var wrapper = mount(_react2.default.createElement(
          _MuiThemeProvider2.default,
          { theme: (0, _createMuiTheme2.default)(), disableStylesGeneration: true },
          _react2.default.createElement(
            _reactJss.JssProvider,
            { registry: sheetsRegistry, jss: jss, generateClassName: generateClassName },
            _react2.default.createElement(StyledComponent, null)
          )
        ));
        _chai.assert.strictEqual(sheetsRegistry.registry.length, 0);
        _chai.assert.deepEqual(wrapper.find(Empty).props().classes, {});
        wrapper.unmount();
        _chai.assert.strictEqual(sheetsRegistry.registry.length, 0);
      });
    });
  });

  describe('HMR with same state', function () {
    it('should take the new stylesCreator into account', function () {
      var styles1 = { root: { padding: 1 } };
      var StyledComponent1 = (0, _withStyles2.default)(styles1, { name: 'MuiTextField' })(Empty);
      var wrapper = mount(_react2.default.createElement(StyledComponent1, null));

      var styles2 = { root: { padding: 2 } };
      var StyledComponent2 = (0, _withStyles2.default)(styles2, { name: 'MuiTextField' })(Empty);

      // Simulate react-hot-loader behavior
      wrapper.instance().componentDidUpdate = StyledComponent2.prototype.componentDidUpdate;

      var classes1 = wrapper.childAt(0).props().classes.root;
      wrapper.setProps({});
      wrapper.update();
      var classes2 = wrapper.childAt(0).props().classes.root;

      _chai.assert.notStrictEqual(classes1, classes2, 'should generate new classes');
    });
  });

  describe('options', function () {
    var jss = void 0;
    var generateClassName = void 0;
    var sheetsRegistry = void 0;

    beforeEach(function () {
      jss = (0, _jss.create)((0, _jssPreset2.default)());
      generateClassName = (0, _createGenerateClassName2.default)();
      sheetsRegistry = new _jss.SheetsRegistry();
    });

    it('should use the displayName', function () {
      // Uglified
      var a = function a() {
        return _react2.default.createElement('div', null);
      };
      var StyledComponent1 = (0, _withStyles2.default)({ root: { padding: 1 } })(a);
      var fooo = function fooo() {
        return _react2.default.createElement('div', null);
      };
      var StyledComponent2 = (0, _withStyles2.default)({ root: { padding: 1 } })(fooo);
      var AppFrame = function AppFrame() {
        return _react2.default.createElement('div', null);
      };
      AppFrame.displayName = 'AppLayout';
      var StyledComponent3 = (0, _withStyles2.default)({ root: { padding: 1 } })(AppFrame);

      mount(_react2.default.createElement(
        _reactJss.JssProvider,
        { registry: sheetsRegistry, jss: jss, generateClassName: generateClassName },
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(StyledComponent1, null),
          _react2.default.createElement(StyledComponent2, null),
          _react2.default.createElement(StyledComponent3, null)
        )
      ));
      _chai.assert.strictEqual(sheetsRegistry.registry[0].options.classNamePrefix, 'a');
      _chai.assert.strictEqual(sheetsRegistry.registry[0].options.name, undefined);
      _chai.assert.strictEqual(sheetsRegistry.registry[1].options.classNamePrefix, 'fooo');
      _chai.assert.strictEqual(sheetsRegistry.registry[1].options.name, undefined);
      _chai.assert.strictEqual(sheetsRegistry.registry[2].options.classNamePrefix, 'AppLayout');
      _chai.assert.strictEqual(sheetsRegistry.registry[2].options.name, 'AppLayout');
    });
  });
});

//# sourceMappingURL=withStyles.test.js.map