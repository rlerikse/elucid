'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _chai = require('chai');

var _createMuiTheme = require('./createMuiTheme');

var _createMuiTheme2 = _interopRequireDefault(_createMuiTheme);

var _colors = require('../colors');

var _consoleErrorMock = require('test/utils/consoleErrorMock');

var _consoleErrorMock2 = _interopRequireDefault(_consoleErrorMock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('createMuiTheme', function () {
  it('should have a palette', function () {
    var muiTheme = (0, _createMuiTheme2.default)();
    _chai.assert.strictEqual(typeof _createMuiTheme2.default === 'undefined' ? 'undefined' : _typeof(_createMuiTheme2.default), 'function');
    _chai.assert.strictEqual(_typeof(muiTheme.palette), 'object');
  });

  it('should have the custom palette', function () {
    var muiTheme = (0, _createMuiTheme2.default)({
      palette: { primary: { main: _colors.deepOrange[500] }, secondary: { main: _colors.green.A400 } }
    });
    _chai.assert.strictEqual(muiTheme.palette.primary.main, _colors.deepOrange[500]);
    _chai.assert.strictEqual(muiTheme.palette.secondary.main, _colors.green.A400);
  });

  it('should allow providing a partial structure', function () {
    var muiTheme = (0, _createMuiTheme2.default)({ transitions: { duration: { shortest: 150 } } });
    _chai.assert.notStrictEqual(muiTheme.transitions.duration.shorter, undefined);
  });

  it('should use the defined spacing unit for the gutters mixin', function () {
    var unit = 100;
    var muiTheme = (0, _createMuiTheme2.default)({ spacing: { unit: unit } });
    _chai.assert.strictEqual(muiTheme.mixins.gutters().paddingLeft, unit * 2);
  });

  describe('shadows', function () {
    it('should provide the default array', function () {
      var muiTheme = (0, _createMuiTheme2.default)();
      _chai.assert.strictEqual(muiTheme.shadows[2], '0px 1px 5px 0px rgba(0,0,0,0.2),' + '0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)');
    });

    it('should override the array as expected', function () {
      var shadows = ['none', 1, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 10, 10, 10, 11, 11];
      var muiTheme = (0, _createMuiTheme2.default)({ shadows: shadows });
      _chai.assert.strictEqual(muiTheme.shadows, shadows);
    });
  });

  describe('props', function () {
    it('should have the props as expected', function () {
      var props = {
        MuiDialog: {
          fullScreen: true,
          fullWidth: false
        },
        MuiButtonBase: {
          disableRipple: true
        },
        MuiPopover: {
          container: document.createElement('div')
        }
      };
      var muiTheme = (0, _createMuiTheme2.default)({ props: props });
      _chai.assert.deepEqual(muiTheme.props, props);
    });
  });

  describe('overrides', function () {
    beforeEach(function () {
      _consoleErrorMock2.default.spy();
    });

    afterEach(function () {
      _consoleErrorMock2.default.reset();
    });

    it('should warn when trying to override an internal state the wrong way', function () {
      (0, _createMuiTheme2.default)({ overrides: { Button: { disabled: { color: 'blue' } } } });
      _chai.assert.strictEqual(_consoleErrorMock2.default.args().length, 0);
      (0, _createMuiTheme2.default)({ overrides: { MuiButton: { root: { color: 'blue' } } } });
      _chai.assert.strictEqual(_consoleErrorMock2.default.args().length, 0);
      (0, _createMuiTheme2.default)({ overrides: { MuiButton: { disabled: { color: 'blue' } } } });
      _chai.assert.strictEqual(_consoleErrorMock2.default.args().length, 1);
      _chai.assert.match(_consoleErrorMock2.default.args()[0][0], /the `MuiButton` component increases the CSS specificity of the `disabled` internal state./);
    });
  });
});

//# sourceMappingURL=createMuiTheme.test.js.map