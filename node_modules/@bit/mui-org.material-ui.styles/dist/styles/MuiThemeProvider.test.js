'use strict';

var _sinon = require('sinon');

var _chai = require('chai');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _jss = require('jss');

var _reactJss = require('react-jss');

var _server = require('react-dom/server');

var _server2 = _interopRequireDefault(_server);

var _testUtils = require('@material-ui/core/test-utils');

var _createMuiTheme = require('./createMuiTheme');

var _createMuiTheme2 = _interopRequireDefault(_createMuiTheme);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _createGenerateClassName = require('./createGenerateClassName');

var _createGenerateClassName2 = _interopRequireDefault(_createGenerateClassName);

var _withTheme = require('./withTheme');

var _withTheme2 = _interopRequireDefault(_withTheme);

var _MuiThemeProvider = require('./MuiThemeProvider');

var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getThemeSpy() {
  var themeSpy = (0, _sinon.spy)();
  var ThemeSpy = function ThemeSpy(props) {
    themeSpy(props.theme);
    return props.children;
  };

  ThemeSpy.propTypes = {
    children: _propTypes2.default.node.isRequired,
    theme: _propTypes2.default.object
  };

  return {
    ThemeSpy: (0, _withTheme2.default)()(ThemeSpy),
    themeSpy: themeSpy
  };
}

function getOptionsSpy() {
  var optionsSpy = (0, _sinon.spy)();
  var OptionsSpy = function OptionsSpy(props, context) {
    optionsSpy(context.muiThemeProviderOptions);
    return props.children;
  };

  OptionsSpy.propTypes = {
    children: _propTypes2.default.element.isRequired
  };

  OptionsSpy.contextTypes = {
    muiThemeProviderOptions: _propTypes2.default.object
  };

  return {
    OptionsSpy: OptionsSpy,
    optionsSpy: optionsSpy
  };
}

describe('<MuiThemeProvider />', function () {
  var mount = void 0;

  before(function () {
    mount = (0, _testUtils.createMount)();
  });

  after(function () {
    mount.cleanUp();
  });

  describe('server-side', function () {
    // Only run the test on node.
    if (!/jsdom/.test(window.navigator.userAgent)) {
      return;
    }

    var theme = (0, _createMuiTheme2.default)();

    function assertRendering(markup, sheetsRegistry) {
      _chai.assert.notStrictEqual(markup.match('Hello World'), null);
      _chai.assert.strictEqual(sheetsRegistry.registry.length, 2);
      _chai.assert.strictEqual(sheetsRegistry.toString().length > 4000, true);
      _chai.assert.strictEqual(sheetsRegistry.registry[0].classes.root, 'MuiButtonBase-root-27');
      _chai.assert.deepEqual(sheetsRegistry.registry[0].classes, {
        disabled: 'MuiButtonBase-disabled-28',
        focusVisible: 'MuiButtonBase-focusVisible-29',
        root: 'MuiButtonBase-root-27'
      }, 'the class names should be deterministic');
      _chai.assert.strictEqual(sheetsRegistry.registry[1].classes.root, 'MuiButton-root-1');
    }

    it('should be able to extract the styles', function () {
      var sheetsRegistry = new _jss.SheetsRegistry();
      var generateClassName = (0, _createGenerateClassName2.default)();

      var markup = _server2.default.renderToString(_react2.default.createElement(
        _reactJss.JssProvider,
        { registry: sheetsRegistry, generateClassName: generateClassName },
        _react2.default.createElement(
          _MuiThemeProvider2.default,
          { theme: theme, sheetsManager: new Map() },
          _react2.default.createElement(
            _Button2.default,
            null,
            'Hello World'
          )
        )
      ));

      assertRendering(markup, sheetsRegistry);
    });

    it('should be able to cache the sheets between two requests', function () {
      var generateClassName = (0, _createGenerateClassName2.default)();
      var sheetsCache = new Map();

      var sheetsRegistry1 = new _jss.SheetsRegistry();
      var markup1 = _server2.default.renderToString(_react2.default.createElement(
        _reactJss.JssProvider,
        { registry: sheetsRegistry1, generateClassName: generateClassName },
        _react2.default.createElement(
          _MuiThemeProvider2.default,
          { theme: theme, sheetsManager: new Map(), sheetsCache: sheetsCache },
          _react2.default.createElement(
            _Button2.default,
            null,
            'Hello World'
          )
        )
      ));
      assertRendering(markup1, sheetsRegistry1);

      var sheetsRegistry2 = new _jss.SheetsRegistry();
      var markup2 = _server2.default.renderToString(_react2.default.createElement(
        _reactJss.JssProvider,
        { registry: sheetsRegistry2, generateClassName: generateClassName },
        _react2.default.createElement(
          _MuiThemeProvider2.default,
          { theme: theme, sheetsManager: new Map(), sheetsCache: sheetsCache },
          _react2.default.createElement(
            _Button2.default,
            null,
            'Hello World'
          )
        )
      ));
      assertRendering(markup2, sheetsRegistry2);
    });
  });

  describe('mount', function () {
    it('should work with nesting theme', function () {
      var _getThemeSpy = getThemeSpy(),
          themeSpy1 = _getThemeSpy.themeSpy,
          ThemeSpy1 = _getThemeSpy.ThemeSpy;

      var _getThemeSpy2 = getThemeSpy(),
          themeSpy2 = _getThemeSpy2.themeSpy,
          ThemeSpy2 = _getThemeSpy2.ThemeSpy;

      var _getThemeSpy3 = getThemeSpy(),
          themeSpy3 = _getThemeSpy3.themeSpy,
          ThemeSpy3 = _getThemeSpy3.ThemeSpy;

      var theme1 = (0, _createMuiTheme2.default)({ status: { color: 'orange' } });
      var theme2 = function theme2(outerTheme) {
        return Object.assign({}, outerTheme, { status: { color: 'green' } });
      };
      var theme3 = (0, _createMuiTheme2.default)({ status: { color: 'yellow' } });

      var wrapper = mount(_react2.default.createElement(
        _MuiThemeProvider2.default,
        { theme: theme1 },
        _react2.default.createElement(
          ThemeSpy1,
          null,
          _react2.default.createElement(
            _MuiThemeProvider2.default,
            { theme: theme2 },
            _react2.default.createElement(
              ThemeSpy2,
              null,
              _react2.default.createElement(
                'span',
                null,
                'Foo'
              )
            )
          ),
          _react2.default.createElement(
            _MuiThemeProvider2.default,
            { theme: theme3 },
            _react2.default.createElement(
              ThemeSpy3,
              null,
              _react2.default.createElement(
                'span',
                null,
                'Bar'
              )
            )
          )
        )
      ));

      _chai.assert.strictEqual(themeSpy1.callCount, 1);
      _chai.assert.strictEqual(themeSpy1.args[0][0].status.color, 'orange');
      _chai.assert.strictEqual(themeSpy2.callCount, 1);
      _chai.assert.strictEqual(themeSpy2.args[0][0].status.color, 'green');
      _chai.assert.strictEqual(themeSpy3.callCount, 1);
      _chai.assert.strictEqual(themeSpy3.args[0][0].status.color, 'yellow');

      wrapper.setProps({ theme: (0, _createMuiTheme2.default)({ status: { color: 'blue' } }) });

      _chai.assert.strictEqual(themeSpy1.callCount, 3);
      _chai.assert.strictEqual(themeSpy1.args[2][0].status.color, 'blue');
      _chai.assert.strictEqual(themeSpy2.callCount, 3);
      _chai.assert.strictEqual(themeSpy2.args[2][0].status.color, 'green');
      _chai.assert.strictEqual(themeSpy3.callCount, 3);
      _chai.assert.strictEqual(themeSpy3.args[2][0].status.color, 'yellow');
    });

    it('should forward the parent options', function () {
      var theme = (0, _createMuiTheme2.default)({ status: { color: 'orange' } });

      var optionsSpy = (0, _sinon.spy)();

      function OptionsSpy(props, context) {
        optionsSpy(context.muiThemeProviderOptions);
        return _react2.default.createElement('div', null);
      }

      OptionsSpy.contextTypes = {
        muiThemeProviderOptions: _propTypes2.default.object.isRequired
      };

      mount(_react2.default.createElement(
        _MuiThemeProvider2.default,
        { theme: theme, disableStylesGeneration: true },
        _react2.default.createElement(
          _MuiThemeProvider2.default,
          { theme: theme },
          _react2.default.createElement(OptionsSpy, null)
        )
      ));
      _chai.assert.strictEqual(optionsSpy.callCount, 1);
      _chai.assert.deepEqual(optionsSpy.args[0][0], {
        disableStylesGeneration: true
      });
    });
  });

  describe('prop: disableStylesGeneration', function () {
    it('should provide the property down the context', function () {
      var _getOptionsSpy = getOptionsSpy(),
          optionsSpy = _getOptionsSpy.optionsSpy,
          OptionsSpy = _getOptionsSpy.OptionsSpy;

      var theme = (0, _createMuiTheme2.default)();
      var wrapper = mount(_react2.default.createElement(
        _MuiThemeProvider2.default,
        { theme: theme, disableStylesGeneration: true },
        _react2.default.createElement(
          OptionsSpy,
          null,
          _react2.default.createElement(
            'div',
            null,
            'Foo'
          )
        )
      ));

      _chai.assert.strictEqual(optionsSpy.callCount, 1);
      _chai.assert.strictEqual(optionsSpy.args[0][0].disableStylesGeneration, true);

      wrapper.setProps({ disableStylesGeneration: false });
      _chai.assert.strictEqual(optionsSpy.args[1][0].disableStylesGeneration, false);
    });
  });

  describe('prop: sheetsCache', function () {
    it('should provide the property down the context', function () {
      var _getOptionsSpy2 = getOptionsSpy(),
          optionsSpy = _getOptionsSpy2.optionsSpy,
          OptionsSpy = _getOptionsSpy2.OptionsSpy;

      var theme = (0, _createMuiTheme2.default)();
      var sheetsCache = new Map();
      mount(_react2.default.createElement(
        _MuiThemeProvider2.default,
        { theme: theme, sheetsCache: sheetsCache },
        _react2.default.createElement(
          OptionsSpy,
          null,
          _react2.default.createElement(
            'div',
            null,
            'Foo'
          )
        )
      ));

      _chai.assert.strictEqual(optionsSpy.callCount, 1);
      _chai.assert.strictEqual(optionsSpy.args[0][0].sheetsCache, sheetsCache);
    });
  });
});

//# sourceMappingURL=MuiThemeProvider.test.js.map