'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _chai = require('chai');

var _sinon = require('sinon');

var _brcast = require('brcast');

var _brcast2 = _interopRequireDefault(_brcast);

var _testUtils = require('@material-ui/core/test-utils');

var _themeListener = require('./themeListener');

var _withTheme = require('./withTheme');

var _withTheme2 = _interopRequireDefault(_withTheme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Empty = function Empty() {
  return _react2.default.createElement('div', null);
};
// eslint-disable-next-line react/prefer-stateless-function

var EmptyClass = function (_React$Component) {
  _inherits(EmptyClass, _React$Component);

  function EmptyClass() {
    _classCallCheck(this, EmptyClass);

    return _possibleConstructorReturn(this, (EmptyClass.__proto__ || Object.getPrototypeOf(EmptyClass)).apply(this, arguments));
  }

  _createClass(EmptyClass, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', null);
    }
  }]);

  return EmptyClass;
}(_react2.default.Component);

describe('withTheme', function () {
  var shallow = void 0;
  var context = void 0;
  var mount = void 0;
  var broadcast = void 0;

  before(function () {
    shallow = (0, _testUtils.createShallow)();
    mount = (0, _testUtils.createMount)();
    broadcast = (0, _brcast2.default)();
    context = _defineProperty({}, _themeListener.CHANNEL, broadcast);
  });

  after(function () {
    mount.cleanUp();
  });

  it('should use the theme provided by the context', function () {
    var theme = { themeProperty: 'foo' };
    broadcast.setState(theme);
    var ThemedComponent = (0, _withTheme2.default)()(Empty);
    var wrapper = shallow(_react2.default.createElement(ThemedComponent, null), { context: context });

    _chai.assert.strictEqual(wrapper.props().theme, theme);
  });

  it('should rerender when the theme is updated', function () {
    var theme = { themeProperty: 'foo' };
    broadcast.setState(theme);
    var ThemedComponent = (0, _withTheme2.default)()(Empty);
    var wrapper = mount(_react2.default.createElement(ThemedComponent, null), { context: context });

    _chai.assert.strictEqual(wrapper.instance().state.theme, theme);
    var newTheme = { themeProperty: 'bar' };
    broadcast.setState(newTheme);
    _chai.assert.strictEqual(wrapper.instance().state.theme, newTheme);
  });

  describe('prop: innerRef', function () {
    it('should provide a ref on the inner component', function () {
      var ThemedComponent = (0, _withTheme2.default)()(EmptyClass);
      var handleRef = (0, _sinon.spy)();
      mount(_react2.default.createElement(ThemedComponent, { innerRef: handleRef }));
      _chai.assert.strictEqual(handleRef.callCount, 1);
    });
  });
});

//# sourceMappingURL=withTheme.test.js.map