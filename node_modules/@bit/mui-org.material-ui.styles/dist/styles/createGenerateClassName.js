'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createGenerateClassName;

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;

function safePrefix(classNamePrefix) {
  var prefix = String(classNamePrefix);
  (0, _warning2.default)(prefix.length < 256, 'Material-UI: the class name prefix is too long: ' + prefix + '.');
  // Sanitize the string as will be used to prefix the generated class name.
  return prefix.replace(escapeRegex, '-');
}

// Returns a function which generates unique class names based on counters.
// When new generator function is created, rule counter is reset.
// We need to reset the rule counter for SSR for each request.
//
// It's inspired by
// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js
function createGenerateClassName() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$dangerouslyU = options.dangerouslyUseGlobalCSS,
      dangerouslyUseGlobalCSS = _options$dangerouslyU === undefined ? false : _options$dangerouslyU,
      _options$productionPr = options.productionPrefix,
      productionPrefix = _options$productionPr === undefined ? 'jss' : _options$productionPr,
      _options$seed = options.seed,
      seed = _options$seed === undefined ? '' : _options$seed;

  var ruleCounter = 0;

  return function (rule, styleSheet) {
    ruleCounter += 1;
    (0, _warning2.default)(ruleCounter < 1e10, ['Material-UI: you might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));

    if (dangerouslyUseGlobalCSS && styleSheet && styleSheet.options.name) {
      return safePrefix(styleSheet.options.name) + '-' + rule.key;
    }

    if (process.env.NODE_ENV === 'production') {
      return '' + productionPrefix + seed + ruleCounter;
    }

    // Help with debuggability.
    if (styleSheet && styleSheet.options.classNamePrefix) {
      return safePrefix(styleSheet.options.classNamePrefix) + '-' + rule.key + '-' + seed + ruleCounter;
    }

    return rule.key + '-' + seed + ruleCounter;
  };
}

//# sourceMappingURL=createGenerateClassName.js.map