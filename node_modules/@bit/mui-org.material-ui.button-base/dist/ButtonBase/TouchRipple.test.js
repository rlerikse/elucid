'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sinon = require('sinon');

var _chai = require('chai');

var _testUtils = require('@material-ui/core/test-utils');

var _TouchRipple = require('./TouchRipple');

var _TouchRipple2 = _interopRequireDefault(_TouchRipple);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cb = function cb() {};

describe('<TouchRipple />', function () {
  var shallow = void 0;
  var mount = void 0;
  var classes = void 0;
  var TouchRippleNaked = (0, _testUtils.unwrap)(_TouchRipple2.default);

  before(function () {
    shallow = (0, _testUtils.createShallow)({ dive: true });
    mount = (0, _testUtils.createMount)();
    classes = (0, _testUtils.getClasses)(_react2.default.createElement(_TouchRipple2.default, null));
  });

  after(function () {
    mount.cleanUp();
  });

  it('should render a <ReactTransitionGroup> component', function () {
    var wrapper = shallow(_react2.default.createElement(_TouchRipple2.default, null));
    _chai.assert.strictEqual(wrapper.name(), 'TransitionGroup');
    _chai.assert.strictEqual(wrapper.props().component, 'span');
    _chai.assert.strictEqual(wrapper.hasClass(classes.root), true);
  });

  it('should render the custom className', function () {
    var wrapper = shallow(_react2.default.createElement(_TouchRipple2.default, { className: 'test-class-name' }));
    _chai.assert.strictEqual(wrapper.is('.test-class-name'), true);
  });

  describe('prop: center', function () {
    it('should should compute the right ripple dimensions', function () {
      var wrapper = shallow(_react2.default.createElement(_TouchRipple2.default, { center: true }));
      var instance = wrapper.instance();
      instance.start({}, {
        fakeElement: true
      }, cb);
      wrapper.update();
      _chai.assert.strictEqual(wrapper.childAt(0).props().rippleSize, 1);
    });
  });

  it('should create individual ripples', function () {
    var wrapper = mount(_react2.default.createElement(TouchRippleNaked, { classes: {} }));
    var instance = wrapper.instance();

    _chai.assert.strictEqual(wrapper.state().ripples.length, 0);

    instance.start({ clientX: 0, clientY: 0 }, cb);
    _chai.assert.strictEqual(wrapper.state().ripples.length, 1);

    instance.start({ clientX: 0, clientY: 0 }, cb);
    _chai.assert.strictEqual(wrapper.state().ripples.length, 2);

    instance.start({ clientX: 0, clientY: 0 }, cb);
    _chai.assert.strictEqual(wrapper.state().ripples.length, 3);

    instance.stop({ type: 'mouseup' });
    _chai.assert.strictEqual(wrapper.state().ripples.length, 2);

    instance.stop({ type: 'mouseup' });
    _chai.assert.strictEqual(wrapper.state().ripples.length, 1);

    instance.stop({ type: 'mouseup' });
    _chai.assert.strictEqual(wrapper.state().ripples.length, 0);
  });

  describe('creating unique ripples', function () {
    it('should create a ripple', function () {
      var wrapper = shallow(_react2.default.createElement(_TouchRipple2.default, null));
      var instance = wrapper.instance();
      instance.start({}, {
        pulsate: true,
        fakeElement: true
      }, cb);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 1);
    });

    it('should ignore a mousedown event', function () {
      var wrapper = shallow(_react2.default.createElement(_TouchRipple2.default, null));
      var instance = wrapper.instance();
      instance.ignoringMouseDown = true;
      instance.start({ type: 'mousedown' }, cb);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 0);
    });

    it('should set ignoringMouseDown to true', function () {
      var wrapper = shallow(_react2.default.createElement(_TouchRipple2.default, null));
      var instance = wrapper.instance();
      _chai.assert.strictEqual(instance.ignoringMouseDown === true, false);
      instance.start({ type: 'touchstart' }, { fakeElement: true }, cb);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 1);
      _chai.assert.strictEqual(instance.ignoringMouseDown, true);
    });

    it('should create a specific ripple', function () {
      var wrapper = shallow(_react2.default.createElement(_TouchRipple2.default, null));
      var instance = wrapper.instance();
      var clientX = 1;
      var clientY = 1;
      instance.start({ clientX: clientX, clientY: clientY }, { fakeElement: true }, cb);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 1);
      _chai.assert.strictEqual(wrapper.state().ripples[0].props.rippleX, clientX);
      _chai.assert.strictEqual(wrapper.state().ripples[0].props.rippleY, clientY);
    });
  });

  describe('mobile', function () {
    var clock = void 0;

    before(function () {
      clock = (0, _sinon.useFakeTimers)();
    });

    after(function () {
      clock.restore();
    });

    it('should delay the display of the ripples', function () {
      var wrapper = shallow(_react2.default.createElement(_TouchRipple2.default, null));
      var instance = wrapper.instance();

      _chai.assert.strictEqual(wrapper.state().ripples.length, 0);
      instance.start({ touches: [], clientX: 0, clientY: 0 }, { fakeElement: true }, cb);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 0);

      clock.tick(_TouchRipple.DELAY_RIPPLE);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 1);

      clock.tick(_TouchRipple.DELAY_RIPPLE);
      instance.stop({ type: 'touchend' }, cb);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 0);
    });

    it('should trigger the ripple for short touch interactions', function () {
      var wrapper = shallow(_react2.default.createElement(_TouchRipple2.default, null));
      var instance = wrapper.instance();

      _chai.assert.strictEqual(wrapper.state().ripples.length, 0);
      instance.start({ touches: [], clientX: 0, clientY: 0 }, { fakeElement: true }, cb);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 0);

      clock.tick(_TouchRipple.DELAY_RIPPLE / 2);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 0);
      instance.stop({ type: 'touchend', persist: function persist() {} }, cb);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 1);

      clock.tick(1);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 0);
    });

    it('should interrupt the ripple schedule', function () {
      var wrapper = shallow(_react2.default.createElement(_TouchRipple2.default, null));
      var instance = wrapper.instance();

      _chai.assert.strictEqual(wrapper.state().ripples.length, 0);
      instance.start({ touches: [], clientX: 0, clientY: 0 }, { fakeElement: true }, cb);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 0);

      clock.tick(_TouchRipple.DELAY_RIPPLE / 2);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 0);

      instance.stop({ type: 'touchmove' });
      clock.tick(_TouchRipple.DELAY_RIPPLE);
      _chai.assert.strictEqual(wrapper.state().ripples.length, 0);
    });
  });
});

//# sourceMappingURL=TouchRipple.test.js.map