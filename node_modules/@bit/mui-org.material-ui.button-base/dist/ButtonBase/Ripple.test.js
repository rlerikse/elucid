'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _chai = require('chai');

var _sinon = require('sinon');

var _testUtils = require('@material-ui/core/test-utils');

var _TouchRipple = require('./TouchRipple');

var _TouchRipple2 = _interopRequireDefault(_TouchRipple);

var _Ripple = require('./Ripple');

var _Ripple2 = _interopRequireDefault(_Ripple);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<Ripple />', function () {
  var shallow = void 0;
  var classes = void 0;
  var mount = void 0;

  before(function () {
    shallow = (0, _testUtils.createShallow)();
    classes = (0, _testUtils.getClasses)(_react2.default.createElement(_TouchRipple2.default, null));
    mount = (0, _testUtils.createMount)();
  });

  after(function () {
    mount.cleanUp();
  });

  it('should render a Transition', function () {
    var wrapper = shallow(_react2.default.createElement(_Ripple2.default, { classes: classes, timeout: {}, rippleX: 0, rippleY: 0, rippleSize: 10 }));
    _chai.assert.strictEqual(wrapper.name(), 'Transition');
  });

  it('should have the ripple className', function () {
    var wrapper = shallow(_react2.default.createElement(_Ripple2.default, { classes: classes, timeout: {}, rippleX: 0, rippleY: 0, rippleSize: 11 }));
    _chai.assert.strictEqual(wrapper.childAt(0).hasClass(classes.ripple), true);
    _chai.assert.strictEqual(wrapper.childAt(0).hasClass(classes.fast), false);
  });

  describe('starting and stopping', function () {
    var wrapper = void 0;

    before(function () {
      wrapper = mount(_react2.default.createElement(_Ripple2.default, {
        classes: classes,
        timeout: { exit: 0, enter: 0 },
        'in': false,
        rippleX: 0,
        rippleY: 0,
        rippleSize: 11
      }));
    });

    it('should start the ripple', function () {
      _chai.assert.strictEqual(wrapper.state().visible, false);
      wrapper.setProps({ in: true });
      wrapper.update();
      _chai.assert.strictEqual(wrapper.state().visible, true);
      var rippleWrapper = wrapper.find('span').first();
      _chai.assert.strictEqual(rippleWrapper.hasClass(classes.rippleVisible), true);
    });

    it('should stop the ripple', function () {
      wrapper.setProps({ in: true });
      wrapper.setProps({ in: false });
      wrapper.update();
      _chai.assert.strictEqual(wrapper.state().leaving, true);
      var childWrapper = wrapper.find('span').last();
      _chai.assert.strictEqual(childWrapper.hasClass(classes.childLeaving), true);
    });
  });

  describe('pulsating and stopping 1', function () {
    var wrapper = void 0;

    before(function () {
      wrapper = mount(_react2.default.createElement(_Ripple2.default, {
        classes: classes,
        timeout: { enter: 0, exit: 0 },
        'in': false,
        rippleX: 0,
        rippleY: 0,
        rippleSize: 11,
        pulsate: true
      }));
    });

    it('should render the ripple inside a pulsating Ripple', function () {
      _chai.assert.strictEqual(wrapper.name(), 'Ripple');
      var rippleWrapper = wrapper.find('span').first();
      _chai.assert.strictEqual(rippleWrapper.hasClass(classes.ripple), true);
      _chai.assert.strictEqual(rippleWrapper.hasClass(classes.ripplePulsate), true);
      var childWrapper = wrapper.find('span').last();
      _chai.assert.strictEqual(childWrapper.hasClass(classes.childPulsate), true);
    });

    it('should start the ripple', function () {
      _chai.assert.strictEqual(wrapper.state().visible, false);
      wrapper.setProps({ in: true });
      wrapper.update();
      _chai.assert.strictEqual(wrapper.state().visible, true);
      var rippleWrapper = wrapper.find('span').first();
      _chai.assert.strictEqual(rippleWrapper.hasClass(classes.rippleVisible), true);
      var childWrapper = wrapper.find('span').last();
      _chai.assert.strictEqual(childWrapper.hasClass(classes.childPulsate), true);
    });

    it('should stop the ripple', function () {
      wrapper.setProps({ in: false });
      wrapper.update();
      _chai.assert.strictEqual(wrapper.state().leaving, true);
      var childWrapper = wrapper.find('span').last();
      _chai.assert.strictEqual(childWrapper.hasClass(classes.childLeaving), true);
    });
  });

  describe('pulsating and stopping 2', function () {
    var wrapper = void 0;
    var clock = void 0;
    var callbackSpy = void 0;

    beforeEach(function () {
      callbackSpy = (0, _sinon.spy)();
      wrapper = mount(_react2.default.createElement(_Ripple2.default, {
        classes: classes,
        timeout: { exit: 550 },
        'in': true,
        onExited: callbackSpy,
        rippleX: 0,
        rippleY: 0,
        rippleSize: 11,
        pulsate: true
      }));
      clock = (0, _sinon.useFakeTimers)();
    });

    afterEach(function () {
      clock.restore();
    });

    it('handleExit should trigger a timer', function () {
      wrapper.setProps({ in: false });
      clock.tick(549);
      _chai.assert.strictEqual(callbackSpy.callCount, 0);
      clock.tick(1);
      _chai.assert.strictEqual(callbackSpy.callCount, 1);
    });

    it('unmount should defuse the handleExit timer', function () {
      wrapper.setProps({ in: false });
      wrapper.unmount();
      clock.tick(550);
      _chai.assert.strictEqual(callbackSpy.callCount, 0);
    });
  });
});

//# sourceMappingURL=Ripple.test.js.map