type User {
  id: ID!
  name: String!
  createdAt: String!
  completed: Boolean!
  userList: UserList!
  userId: String!
}

type UserList {
  id: ID!
  createdAt: String!
  users(filter: ModelUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserConnection
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelUserFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  completed: ModelBooleanFilterInput
  userId: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getUserList(id: ID!): UserList
  listUserLists(filter: ModelUserListFilterInput, limit: Int, nextToken: String): ModelUserListConnection
}

input CreateUserInput {
  id: ID
  name: String!
  createdAt: String!
  completed: Boolean!
  userId: String!
  userUserListId: ID!
}

input UpdateUserInput {
  id: ID!
  name: String
  createdAt: String
  completed: Boolean
  userId: String
  userUserListId: ID
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createUserList(input: CreateUserListInput!): UserList
  updateUserList(input: UpdateUserListInput!): UserList
  deleteUserList(input: DeleteUserListInput!): UserList
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateUserList: UserList @aws_subscribe(mutations: ["createUserList"])
  onUpdateUserList: UserList @aws_subscribe(mutations: ["updateUserList"])
  onDeleteUserList: UserList @aws_subscribe(mutations: ["deleteUserList"])
}

type ModelUserListConnection {
  items: [UserList]
  nextToken: String
}

input ModelUserListFilterInput {
  id: ModelIDFilterInput
  createdAt: ModelStringFilterInput
  and: [ModelUserListFilterInput]
  or: [ModelUserListFilterInput]
  not: ModelUserListFilterInput
}

input CreateUserListInput {
  id: ID
  createdAt: String!
}

input UpdateUserListInput {
  id: ID!
  createdAt: String
}

input DeleteUserListInput {
  id: ID
}
